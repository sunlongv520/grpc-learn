// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Orders.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderResponse) Reset()         { *m = OrderResponse{} }
func (m *OrderResponse) String() string { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()    {}
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e258ede2b56f8bf, []int{0}
}

func (m *OrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderResponse.Unmarshal(m, b)
}
func (m *OrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderResponse.Marshal(b, m, deterministic)
}
func (m *OrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponse.Merge(m, src)
}
func (m *OrderResponse) XXX_Size() int {
	return xxx_messageInfo_OrderResponse.Size(m)
}
func (m *OrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponse proto.InternalMessageInfo

func (m *OrderResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*OrderResponse)(nil), "services.OrderResponse")
}

func init() { proto.RegisterFile("Orders.proto", fileDescriptor_6e258ede2b56f8bf) }

var fileDescriptor_6e258ede2b56f8bf = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xf1, 0x2f, 0x4a, 0x49,
	0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0x2d, 0x96, 0xe2, 0xf1, 0xcd, 0x4f, 0x49, 0xcd, 0x81, 0x8a, 0x2b, 0x39, 0x72, 0xf1, 0x82,
	0xd5, 0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0x97, 0x24,
	0x96, 0x94, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x12, 0x5c, 0xec,
	0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x4c, 0x60, 0x09, 0x18, 0xd7, 0xc8, 0x0b, 0x6a,
	0x55, 0x70, 0x6a, 0x51, 0x66, 0x59, 0x72, 0xaa, 0x90, 0x15, 0x17, 0x87, 0x5f, 0x6a, 0x39, 0x58,
	0x48, 0x48, 0x58, 0x0f, 0x66, 0xaf, 0x1e, 0x58, 0xc0, 0x37, 0x31, 0x33, 0x4f, 0x4a, 0x1c, 0x4d,
	0x10, 0x66, 0xb7, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x55, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xee, 0xdb, 0x5a, 0x98, 0xbd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderSerivceClient is the client API for OrderSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderSerivceClient interface {
	NewOrder(ctx context.Context, in *OrderMain, opts ...grpc.CallOption) (*OrderResponse, error)
}

type orderSerivceClient struct {
	cc *grpc.ClientConn
}

func NewOrderSerivceClient(cc *grpc.ClientConn) OrderSerivceClient {
	return &orderSerivceClient{cc}
}

func (c *orderSerivceClient) NewOrder(ctx context.Context, in *OrderMain, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/services.OrderSerivce/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSerivceServer is the server API for OrderSerivce service.
type OrderSerivceServer interface {
	NewOrder(context.Context, *OrderMain) (*OrderResponse, error)
}

// UnimplementedOrderSerivceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderSerivceServer struct {
}

func (*UnimplementedOrderSerivceServer) NewOrder(ctx context.Context, req *OrderMain) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}

func RegisterOrderSerivceServer(s *grpc.Server, srv OrderSerivceServer) {
	s.RegisterService(&_OrderSerivce_serviceDesc, srv)
}

func _OrderSerivce_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSerivceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.OrderSerivce/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSerivceServer).NewOrder(ctx, req.(*OrderMain))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.OrderSerivce",
	HandlerType: (*OrderSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _OrderSerivce_NewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Orders.proto",
}
